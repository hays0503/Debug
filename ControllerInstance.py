import queue


class ControllerInstance:
    '''
        Абстракция на тему контролера
    '''

    def __init__(self):
        # Означает что с этим контролером в данный момент работают
        # (нужно для того что бы лишний раз не тратить время на смену контекста если выбранный контекст уже выбран)
        self.selected = False

        # Сторона с которой была приложена карточка
        # -1 означает что на данный момент карточки еще не было
        self.reader_side = -1

        # Последний раз какая карта была приложена
        self.last_cart = "null"

        # Адрес который присвоен контролеру в конвертере
        # -1 означает что на данный момент не присвоен адрес
        self.address_number = -1

        # Серийный адрес контролера
        # -1 означает что на данный момент не присвоен серийный адрес
        self.serial_number = -1

        # Название (имя-модели) контролера
        # null означает что на данный момент не присвоен
        self.name_controller = "null"

        # Версия программного обеспечения
        # -1 означает что на данный момент не присвоен
        self.version_number = -1

        # Количество банков с ключами которые есть в контролере
        # -1 означает что на данный момент не присвоен
        self.banks = -1

        # Количество ключей которые могут содержать в себе контролер
        # -1 означает что на данный момент не присвоен
        self.keys = -1

        # Массив из ключей который есть в контролере
        # [] означает что на данный момент ключей нет или структура не была инициализированная
        self.keys_in_controller = []

        # Массив из индексов ключей который удалили в контролере
        # [] означает что на данный момент ключей нет или структура не была инициализированная
        self.key_index_in_controller = []

        # Массив из индексов ключей (сырые без приведения типа) который удалили в контролере
        # [] означает что на данный момент ключей нет или структура не была инициализированная
        self.raw_key_index_in_controller = []

        # Количество событий которые может в себе хранить контроллер
        # -1 означает что на данный момент не присвоен
        self.events = -1

        # Указатель на последнее событие
        # -1 означает что на данный момент не присвоен
        self.events_iterator = -1

        # Массив из событий который есть в контролере
        # [] означает что на данный момент событий нет или структура не была инициализированная
        self.events_in_controller = []

        # Режим в котором сейчас работает контроллер
        # -1 означает что на данный момент не присвоен (не включён в обработку)
        # 0 Автономный режим
        # 1 Режим онлайн
        self.logic_mode = -1

        # Включен ли контролер
        # -1 означает что на данный момент не присвоен
        self.active = -1

        # Формирование очереди сообщений извне(из интернета)
        self.message_queue_in = queue.Queue()

        # Формирование очереди сообщений от контроллера(в интернет)
        self.message_queue_out = queue.Queue()

    def power_on(self):
        '''
            Сообщение включение (web-json)
            Один из первичных этапов в рукопожатие контролер <--> сервер
        '''
        json_object = {
            "id": 1,
            "operation": "power_on",
            "fw": self.version_number,
            "conn_fw": self.version_number,
            "active": self.active,
            "mode": self.logic_mode,
            # Так как всё равно обращаемся по серийнику то ip не задействуем
            "controller_ip": "0.0.0.0"
        }
        return self.build_message(json_object)

    def build_message(self, messages: any):
        '''
            Построение типового (web-json)
        '''
        object_build_message = {
            "type": self.name_controller,
            "sn": self.serial_number,
            "messages": [messages]
        }
        return object_build_message
